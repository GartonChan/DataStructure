图的基本概念:

    由集合V(vertex)和E(edge)组成,记为G=(V,E)
        其中 V是顶点的有限集合,记为V(G), E是连接V中两个不同顶点(顶点对)的边的有限集合,记为E(G)
    
    图又分为: 无向图和有向图
        即根据边的方向的有无划分.
            无向用圆括号 括起顶点表示, 而有向图用尖括号括起顶点表示,逗号用于分隔顶点
    
    端点:
        无向图中,存在一条边(vi, vj),则称vi vj是这条边的两个端点,且互为邻接点
        有向图中,存在一条边<vi, vj>,则称此边是vi的出边,vj的入边.vi vj 分别为此边的起始端点(起点)和终止端点(终点),且互为邻接点
    
    度:
        在无向图或有向图中, 顶点所具有的边的个数
            在有向图中又有分为入度和出度,顾名思义即跟入边和出边有关.
        n个顶点e条边, 每个顶点的度为di, 则有e = sigma n(di) * (1/2)   -> 每个边有两个顶点.

    完全图:
        对无向图:每两个顶点都有一条边
        对有向图:每两个顶点都有方向相反的两条边
    
        对n个顶点的完全无向图: Cn 2 = n(n-1) / 2   -> 指的是组合 C n 取 2
        对n个顶点的完全有向图: Pn 2 = n(n-1)

    稠密图, 稀疏图:
        根据边的多少划分, 没有特别明确的划分标准
    
    子图:
        G = (V, E) 和 G' = (V', E'), 若V',E'是V,E的子集,就称G'为G的子图

    路径和路径长度:
        vi到vj的一条路径可以表示成顶点序列(vi, ... , vj), 顶点间由逗号分隔.  路径的表示都是用圆括号序列表示
        路径长度: 一条路径上经过的边的数目
        简单路径: 除起点终点可以相同外,其他都顶点不相同.

    回路(环):
        起点和终点为同一个顶点.
    
    连通,连通图和连通分量:
        vi,vj之间有路径即vi和vj连通.
        连通图: 无向图中任两个顶点都连通.
        非连通: 即无向图中存在不连通的两个顶点.
        连通分量: 无向图中的极大连通子图   //  显然,连通图的连通分量只有一个(本身),而非连通图可有多个连通分量.

    强连通图和强连通分量:
        有向图的连通: 有向图G中,vi 到! vj有路径 则从vi到vj是连通的

        强连通图: 任两个顶点vi,vj都由 从vi到vj 和 从vj到vi 连通 即互相存在路径

        强连通分量: 有向图中的极大强连通子图

    权和网:
        权: 每条边都可以附有一个数值,与边相关的数值称为权.
            它可以表示从一个顶点到另一个顶点的距离 或是 花费的代价.
        
        边上带权 -> 带权图(网) 
        
e.g.  有n个顶点的 强连通图 最多由多少条边?最少需要多少条边?
        最多 ->  完全图( n(n-1)条 )
        最少 ->  首尾相连构成一个环即可(n条)


图的存储结构:

    存储的内容主要是 顶点 和 顶点间的邻接关系

    1. 邻接矩阵存储方法(顺序存储)
        设G的邻接矩阵A是n阶方阵定义如下
        a.无权图
            A[i][j]=1 :vi和vj间有边
            A[i][j]=0 :其他

        b.有权图
            A[i][j]=w(ij) :若vi!=vj且二者间有边
            A[i][j]=0     :vi = vj
            A[i][j]=无穷?  :其他
        
        邻接矩阵的特点
        (1).邻接矩阵表示是唯一的.
        (2).压缩存储
            无向图的邻接矩阵一定是一个对称矩阵,因此按照压缩存储的思想,在具体存放时只需要存放上(或下)三角形阵的元素即可
            而有向图一般来说是一个稀疏矩阵,当顶点较多时可以采用三元组表(存储非零元素的行号.列号和值)的方法来存储邻接矩阵
        (3).度
            对于无向图: 邻接矩阵的第i行(或第i列)非零元素(有权时:非零和非无穷大的元素)的个数正好是vi的度
            对于有向图: 邻接矩阵的第i行(或第i列)非零元素(有权时:非零和非无穷大的元素)的个数正好是vi的 出度(行)(或入度(列))!
        (4). 容易确定任两个顶点之间是否有边.不过想要统计边的条数,则需要扫描矩阵,话费时间代价较大,因此有局限性


    2. 邻接表存储方法(链式存储和顺序存储相结合)
        无向图的每个顶点带有一条单链表(记录相邻顶点->存在边->反映了边的信息)
            头结点: 表头结点(顶点信息)  其他结点:表结点/边结点
            每个结点的相邻关系会出现2次 -> 即每条边的关系体现2次
        有向图的每个顶点带有的单链表(记录从每个顶点出发沿途路径上的各顶点信息)
            表头节点:顶点信息   表(边)结点: 
            每条边只出现1次~
    
        然后将表头结点顺序存储, 各表头结点引出单链表用链式存储

        邻接表的特点
        (1). 邻接表的表示不唯一.
            每个顶点对应的单链表中,各边结点的链接次序可以任意,取决于算法和输入次序.
        (2). 存储效率:
            对于n个顶点和e条边的无向图,其邻接表中有n个顶点结点,2e个边结点(被表达两次)
            显然对于稀疏图,邻接表比邻接矩阵要节省空间.
        (3).度
            对于无向图,邻接表的顶点vi对应的第i个链表的边结点数目正好是顶点vi的度
            对于有向图,邻接表的顶点vi对应的第i个链表的边结点数目仅仅是vi的出度.
                    其入度为邻接表中所有表adjvex域(指示与xi邻接的点在图中的位置,一般为顶点编号)值为i的
                    边结点的数目.(扫描邻接表看vi在边结点出现了几次)


图的遍历:
    概念:
        从给定图的任意指定的顶点(初始点)出发,按照某种搜索方法沿着边访问所有顶点
        并且每个顶点仅被访问一次
    连通的无向图或是强连通的有向图,遍历过程一次就可完成,并可按照先后形成一个顶点序列.

    图的遍历 比 树的遍历 复杂
        到达图的每个结点可能存在多条路径.
        因此 -> 我们为了避免重复访问,可以设置标志数组visited[顶点数],当访问过就置1(visited[i]=1),否则为0. 为1者不允许访问.

    根据搜索方法不同,遍历方法有两种: 1.深度优先搜索法DFS    2.广度优先搜索法BFS


        1.深度优先搜素:
            从初始顶点v出发,先访问初始顶点v然后访问相邻未被访问过的顶点w,并以此为新的出发点重复上述步骤,直至图中与当前顶点v邻接的所有顶点都被访问过
            显然,这个遍历过程是一个递归过程.


        2.广度优先搜索:
            先访问初始点vi,接着访问vi所有未被访问过的邻接点,然后再按照邻接点的访问次序,继续访问每一个邻接点(以一个邻接点作为初始点)的邻接点

    非连通图的遍历:
        对于无向图:
            只能访问到初始点所在的连通分量的所有顶点,而其他连通分量的顶点不可能被访问.
            因此 需要从其他每个连通分量 选择初始点分别遍历才能访问所有顶点
        对于有向图:
            初始点到每个顶点都有路径 就能访问所有顶点.
            否则同上述情况(无向图)一样.
