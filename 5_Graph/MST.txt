// Minium spanning tree

生产树:
    一个连通图的生成树是一个极小连通子图,含有图的全部顶点,但仅有构成一棵树的n-1条边
    如果在生成树上再添加一条边 必定构成一个环
        因为依附的两个顶点间由了第二条路径.
    
    一颗n个顶点的生成树(连通无回路图)有且仅有n-1条边.反之由n-1条边的图不一定是生成树
    
    如果一个图由n个顶点和n-1条边构成,则一定是非连通图.若多于n-1条边则一定有回路

最小生成树:
    对于一个带权的连通无向图G的不同生成树,每棵树边上的权值之和最小的树成为图的最小生成树.

    构造准则:
        (1). 必须只用该图的边来构造
        (2). 使用并且仅使用n-1条边来连接图的n个顶点
        (3). 不能使用产生回路的边

构造最小生成树:
    1.普里姆算法(Prim)
        这是一种构造性算法,构造带权无向连通图G=(V, E)的最小生成树T=(U, TE)
        其思路为:
            将G的顶点分成两部分,U是已在MST中的顶点, V-U是还没在MST的顶点
                
                初始, V中任选一个顶点并入U, V-U是剩下的n-1个顶点,TE是空集.
                算法每次在U和V-U的各顶点间存在的边里,选取出权值最小的边,
                并把该边并入TE,把该边位于V-U里的那个顶点并入U. 
                这样U和TE不断扩大,V-U不断缩小.
                (   
                    每次从侯选边中挑取权值最小的边加入到TE,
                    新并入的顶点 考察V-U的所有顶点vj, 修改侯选边,
                    如果(vk, vj)的权值小于原来与vj关联的边,就将其替代作为侯选边
                )
                直至做完了n-1次处理,所有n个顶点都并入U中.于是有U=V,TE里有n-1条边.
                此时得到的T=(U, TE)就是所要求的最小生成树.

        简述:  
            (1) 初始化(任一顶点并入U)
            (2) 侯选边中挑最小并入TE, 对应顶点(假设为vj)并入U
            (3) 更新侯选边的信息, 重复第二步直至完成构造.

    2.克鲁斯卡尔算法(Kruskal)
        是一种按权值的递增次序,选择合适的边来构造MST的方法.
        带权无向连通图G=(V, E)的最小生成树T=(U, TE)
        其思路为:
            (1).
                置U的初值等于V(包含了G的全部顶点)
                TE初值为空集(即T中的每一个顶点都构成分量???)
            
            (2).
                将图G的边按照权值从小到大的次序依次选取,
                如果选取的边不会使T形成回路,就加入TE,否则舍弃
                直至构建完成MST(即TE含有n-1条边)
        关键在于:
            如何判断选取的边是否会使T构成回路
                -> 通过判断边的两个顶点所在的连通分量的方法实现.
                   需要设置一个辅助数组vset[n],代表序号i的顶点所属的连通子图的编号.
                   只要子图编号不同,加入这两个顶点构成的边就不会使得T形成回路.