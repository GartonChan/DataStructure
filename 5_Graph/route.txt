路径:
    在无权图中, 路径的长度为从一顶点到另一顶点存在一条路径,经过的边数为路径长度,等于路径上的顶点数(含起始终止顶点)-1
    最短路径: 在可能的多条路径中,路径长度最短的路径即为最短路径,其路径长度称为最短距离或最短路径长度.

    在带权图中,考虑上各边的权值,通常将路径上的边的权值之和定义为路径长度或称带权路径长度
    最短路径: 从源点到终点可能不止一条路径,把带权路径长度最短的那条称为最短路径,路径长度命名同无权图.

求最短路径问题分为两类:
    单源最短路径 和 每对顶点间的最短路径.
    所站的角度不同.

单源最短路径:
    给定一个带权有向图G=(V, E)与源点(顶点)v,求从v到G中其他顶点的最短距离,并限定各边上的权值大于或等于0

    -> 经典的算法 : 迪克斯特拉(Dijkstra)算法
        基本思想:
            顶点集合V分两组, 
            第一组为已求出最短路径的顶点集合 用S表示.
                以后每求得一条最短路径(v, ..., vk)(即源点v到顶点k的最短路径)就将顶点k加入到集合S,直到全部顶点都加入S,算法结束
            第二组为其余未确定最短路径的顶点集合 用U表示.按最短路径长度的递增次序依次把U的顶点加入到S中(先求短的,后求长的)
                在此过程保持从源点到S各点的最短路径长度不大于v到U中任何顶点的最短路径长度   // (递增次序)
                
            此外,每个顶点应该对应一个距离, S中的顶点的距离就是从v到此顶点的最短路径长度
                U中的顶点距离是从v到此顶点只包含S中的顶点为中间顶点的当前最短路径长度

        具体步骤:
            1.初始: S只包含源点,v的距离为0,U中包含除v外的所有顶点,U中顶点u的距离:邻接点为边上的权值w(uv) 不是邻接点则为无穷(32767)
                这意味着第一次执行2.时一定是从邻接点中挑有最小的最短距离的顶点
            2.从u中选取一个距离最小的顶点k,加入到S中(该选定的距离C(vk)就是v到k的最短长度)
            3.以k为新的考虑的中间点,修改U中的各顶点的距离: 若源点v到顶点u的距离比原来距离短,则修改顶点u的距离值
                修改后的距离为顶点k的距离加上边<k,u>的权, 即直达并不一定是最短,有可能包含中间顶点的距离更短.
            4. 重复上述2,3直至S包含所有顶点.

